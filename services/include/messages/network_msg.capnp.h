// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: network_msg.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#ifndef CAPNP_VERSION
#error "CAPNP_VERSION is not defined, is capnp/generated-header-support.h missing?"
#elif CAPNP_VERSION != 1000001
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(b5bbfbf0f2a9def3);
enum class MessageType_b5bbfbf0f2a9def3: uint16_t {
  UNKNOWN,
  NETWORK_MESSAGE,
  REQUEST,
  REPLY,
  TEST_REQUEST,
  TEST_REPLY,
  YOUTUBE_VIDEO_SNAPSHOT_REQUEST,
  YOUTUBE_VIDEO_SNAPSHOT_RESPONSE,
  YOUTUBE_VIDEO,
  YOUTUBE_VIDEO_HEARTBEAT,
  YOUTUBE_VIDEO_UPDATES,
  YOUTUBE_RESOURCE_SNAPSHOT_REQUEST,
  YOUTUBE_RESOURCE,
  YOUTUBE_RESOURCE_SNAPSHOT_RESPONSE,
  YOUTUBE_RESOURCE_HEARTBEAT,
  YOUTUBE_RESOURCE_UPDATES,
  YOUTUBE_BLOG_SNAPSHOT_REQUEST,
  YOUTUBE_BLOG,
  YOUTUBE_BLOG_SNAPSHOT_RESPONSE,
  YOUTUBE_BLOG_HEARTBEAT,
  YOUTUBE_BLOG_UPDATES,
};
CAPNP_DECLARE_ENUM(MessageType, b5bbfbf0f2a9def3);
CAPNP_DECLARE_SCHEMA(ee7632df027672d3);
CAPNP_DECLARE_SCHEMA(c95b9f4bd61d0ad2);
CAPNP_DECLARE_SCHEMA(aafc318b4e6dd16b);
CAPNP_DECLARE_SCHEMA(8639b5ccf780066a);
CAPNP_DECLARE_SCHEMA(ee8d9842b86c64d2);
CAPNP_DECLARE_SCHEMA(c5be380dabdd9637);
CAPNP_DECLARE_SCHEMA(86e3e64d72ced6e4);
CAPNP_DECLARE_SCHEMA(ffa5743b59b3da90);
CAPNP_DECLARE_SCHEMA(cbd14986e47d8419);
CAPNP_DECLARE_SCHEMA(c316c6e5e969caf9);
CAPNP_DECLARE_SCHEMA(805d0f705e566b34);
CAPNP_DECLARE_SCHEMA(a73c8143033cd5a3);
CAPNP_DECLARE_SCHEMA(b34c2bf3ff2fad78);
CAPNP_DECLARE_SCHEMA(f941c4354ee62503);
CAPNP_DECLARE_SCHEMA(c69eca2f440eca7a);
CAPNP_DECLARE_SCHEMA(e9b8b2d20b67ae29);
CAPNP_DECLARE_SCHEMA(87f0892af7316218);
CAPNP_DECLARE_SCHEMA(bf4fb3c4765c53eb);
CAPNP_DECLARE_SCHEMA(ab94f252dde93a4b);
CAPNP_DECLARE_SCHEMA(91f0914b36261fbb);
CAPNP_DECLARE_SCHEMA(cf9912352ef538ee);
CAPNP_DECLARE_SCHEMA(b66e18029bc03868);

}  // namespace schemas
}  // namespace capnp

namespace curious {
namespace message {

typedef ::capnp::schemas::MessageType_b5bbfbf0f2a9def3 MessageType;

template <typename Key = ::capnp::AnyPointer, typename Value = ::capnp::AnyPointer>
struct Map {
  Map() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Entry;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ee7632df027672d3, 0, 1)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema::Dependency brandDependencies[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return ::capnp::_::ChooseBrand<_capnpPrivate, Key, Value>::brand(); }
    #endif  // !CAPNP_LITE
  };
};

template <typename Key, typename Value>
struct Map<Key, Value>::Entry {
  Entry() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c95b9f4bd61d0ad2, 0, 2)
    #if !CAPNP_LITE
    static const ::capnp::_::RawBrandedSchema::Scope brandScopes[];
    static const ::capnp::_::RawBrandedSchema::Binding brandBindings[];
    static const ::capnp::_::RawBrandedSchema specificBrand;
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return ::capnp::_::ChooseBrand<_capnpPrivate, Key, Value>::brand(); }
    #endif  // !CAPNP_LITE
  };
};

struct NetworkMessage {
  NetworkMessage() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(aafc318b4e6dd16b, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Reply {
  Reply() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(8639b5ccf780066a, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Request {
  Request() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ee8d9842b86c64d2, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TestReply {
  TestReply() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c5be380dabdd9637, 2, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct TestRequest {
  TestRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(86e3e64d72ced6e4, 2, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct YoutubeBlog {
  YoutubeBlog() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ffa5743b59b3da90, 1, 7)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct YoutubeBlogHeartbeat {
  YoutubeBlogHeartbeat() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cbd14986e47d8419, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct YoutubeBlogSnapshotRequest {
  YoutubeBlogSnapshotRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c316c6e5e969caf9, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct YoutubeBlogSnapshotResponse {
  YoutubeBlogSnapshotResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(805d0f705e566b34, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct YoutubeBlogUpdates {
  YoutubeBlogUpdates() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a73c8143033cd5a3, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct YoutubeResource {
  YoutubeResource() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b34c2bf3ff2fad78, 1, 5)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct YoutubeResourceHeartbeat {
  YoutubeResourceHeartbeat() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f941c4354ee62503, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct YoutubeResourceSnapshotRequest {
  YoutubeResourceSnapshotRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(c69eca2f440eca7a, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct YoutubeResourceSnapshotResponse {
  YoutubeResourceSnapshotResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(e9b8b2d20b67ae29, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct YoutubeResourceUpdates {
  YoutubeResourceUpdates() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(87f0892af7316218, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct YoutubeVideo {
  YoutubeVideo() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(bf4fb3c4765c53eb, 1, 8)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct YoutubeVideoHeartbeat {
  YoutubeVideoHeartbeat() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(ab94f252dde93a4b, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct YoutubeVideoSnapshotRequest {
  YoutubeVideoSnapshotRequest() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(91f0914b36261fbb, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct YoutubeVideoSnapshotResponse {
  YoutubeVideoSnapshotResponse() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(cf9912352ef538ee, 1, 3)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct YoutubeVideoUpdates {
  YoutubeVideoUpdates() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(b66e18029bc03868, 1, 2)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

template <typename Key, typename Value>
class Map<Key, Value>::Reader {
public:
  typedef Map Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  template <typename Key2 = ::capnp::AnyPointer, typename Value2 = ::capnp::AnyPointer>
  typename Map<Key2, Value2>::Reader asGeneric() {
    return typename Map<Key2, Value2>::Reader(_reader);
  }

  inline bool hasEntries() const;
  inline typename  ::capnp::List<typename  ::curious::message::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>::Reader getEntries() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename Key, typename Value>
class Map<Key, Value>::Builder {
public:
  typedef Map Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename Key2 = ::capnp::AnyPointer, typename Value2 = ::capnp::AnyPointer>
  typename Map<Key2, Value2>::Builder asGeneric() {
    return typename Map<Key2, Value2>::Builder(_builder);
  }

  inline bool hasEntries();
  inline typename  ::capnp::List<typename  ::curious::message::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>::Builder getEntries();
  inline void setEntries(typename  ::capnp::List<typename  ::curious::message::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>::Reader value);
  inline typename  ::capnp::List<typename  ::curious::message::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>::Builder initEntries(unsigned int size);
  inline void adoptEntries(::capnp::Orphan< ::capnp::List<typename  ::curious::message::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List<typename  ::curious::message::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>> disownEntries();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename Key, typename Value>
class Map<Key, Value>::Pipeline {
public:
  typedef Map Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

template <typename Key, typename Value>
class Map<Key, Value>::Entry::Reader {
public:
  typedef Entry Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  template <typename Key2 = ::capnp::AnyPointer, typename Value2 = ::capnp::AnyPointer>
  typename Map<Key2, Value2>::Entry::Reader asMapGeneric() {
    return typename Map<Key2, Value2>::Entry::Reader(_reader);
  }

  inline bool hasKey() const;
  inline  ::capnp::ReaderFor<Key> getKey() const;

  inline bool hasValue() const;
  inline  ::capnp::ReaderFor<Value> getValue() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

template <typename Key, typename Value>
class Map<Key, Value>::Entry::Builder {
public:
  typedef Entry Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  template <typename Key2 = ::capnp::AnyPointer, typename Value2 = ::capnp::AnyPointer>
  typename Map<Key2, Value2>::Entry::Builder asMapGeneric() {
    return typename Map<Key2, Value2>::Entry::Builder(_builder);
  }

  inline bool hasKey();
  inline  ::capnp::BuilderFor<Key> getKey();
  inline void setKey( ::capnp::ReaderFor<Key> value);
  inline  ::capnp::BuilderFor<Key> initKey();
  inline  ::capnp::BuilderFor<Key> initKey(unsigned int size);
  inline void adoptKey(::capnp::Orphan<Key>&& value);
  inline ::capnp::Orphan<Key> disownKey();

  inline bool hasValue();
  inline  ::capnp::BuilderFor<Value> getValue();
  inline void setValue( ::capnp::ReaderFor<Value> value);
  inline  ::capnp::BuilderFor<Value> initValue();
  inline  ::capnp::BuilderFor<Value> initValue(unsigned int size);
  inline void adoptValue(::capnp::Orphan<Value>&& value);
  inline ::capnp::Orphan<Value> disownValue();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
template <typename Key, typename Value>
class Map<Key, Value>::Entry::Pipeline {
public:
  typedef Entry Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::capnp::PipelineFor<Key> getKey();
  inline  ::capnp::PipelineFor<Value> getValue();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class NetworkMessage::Reader {
public:
  typedef NetworkMessage Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::curious::message::MessageType getMsgType() const;

  inline bool hasTopic() const;
  inline  ::capnp::Text::Reader getTopic() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class NetworkMessage::Builder {
public:
  typedef NetworkMessage Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::curious::message::MessageType getMsgType();
  inline void setMsgType( ::curious::message::MessageType value);

  inline bool hasTopic();
  inline  ::capnp::Text::Builder getTopic();
  inline void setTopic( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTopic(unsigned int size);
  inline void adoptTopic(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTopic();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class NetworkMessage::Pipeline {
public:
  typedef NetworkMessage Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Reply::Reader {
public:
  typedef Reply Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::curious::message::MessageType getMsgType() const;

  inline bool hasTopic() const;
  inline  ::capnp::Text::Reader getTopic() const;

  inline  ::int32_t getId() const;

  inline bool hasRequest() const;
  inline  ::curious::message::Request::Reader getRequest() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Reply::Builder {
public:
  typedef Reply Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::curious::message::MessageType getMsgType();
  inline void setMsgType( ::curious::message::MessageType value);

  inline bool hasTopic();
  inline  ::capnp::Text::Builder getTopic();
  inline void setTopic( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTopic(unsigned int size);
  inline void adoptTopic(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTopic();

  inline  ::int32_t getId();
  inline void setId( ::int32_t value);

  inline bool hasRequest();
  inline  ::curious::message::Request::Builder getRequest();
  inline void setRequest( ::curious::message::Request::Reader value);
  inline  ::curious::message::Request::Builder initRequest();
  inline void adoptRequest(::capnp::Orphan< ::curious::message::Request>&& value);
  inline ::capnp::Orphan< ::curious::message::Request> disownRequest();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Reply::Pipeline {
public:
  typedef Reply Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::curious::message::Request::Pipeline getRequest();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Request::Reader {
public:
  typedef Request Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::curious::message::MessageType getMsgType() const;

  inline bool hasTopic() const;
  inline  ::capnp::Text::Reader getTopic() const;

  inline  ::int32_t getId() const;

  inline bool hasReqGeneratedIp() const;
  inline  ::capnp::Text::Reader getReqGeneratedIp() const;

  inline bool hasReqGeneratedPort() const;
  inline  ::capnp::Text::Reader getReqGeneratedPort() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Request::Builder {
public:
  typedef Request Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::curious::message::MessageType getMsgType();
  inline void setMsgType( ::curious::message::MessageType value);

  inline bool hasTopic();
  inline  ::capnp::Text::Builder getTopic();
  inline void setTopic( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTopic(unsigned int size);
  inline void adoptTopic(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTopic();

  inline  ::int32_t getId();
  inline void setId( ::int32_t value);

  inline bool hasReqGeneratedIp();
  inline  ::capnp::Text::Builder getReqGeneratedIp();
  inline void setReqGeneratedIp( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initReqGeneratedIp(unsigned int size);
  inline void adoptReqGeneratedIp(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownReqGeneratedIp();

  inline bool hasReqGeneratedPort();
  inline  ::capnp::Text::Builder getReqGeneratedPort();
  inline void setReqGeneratedPort( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initReqGeneratedPort(unsigned int size);
  inline void adoptReqGeneratedPort(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownReqGeneratedPort();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Request::Pipeline {
public:
  typedef Request Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestReply::Reader {
public:
  typedef TestReply Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::curious::message::MessageType getMsgType() const;

  inline bool hasTopic() const;
  inline  ::capnp::Text::Reader getTopic() const;

  inline  ::int32_t getId() const;

  inline bool hasRequest() const;
  inline  ::curious::message::Request::Reader getRequest() const;

  inline bool hasResponse() const;
  inline  ::capnp::Text::Reader getResponse() const;

  inline  ::int32_t getResponseTest() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestReply::Builder {
public:
  typedef TestReply Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::curious::message::MessageType getMsgType();
  inline void setMsgType( ::curious::message::MessageType value);

  inline bool hasTopic();
  inline  ::capnp::Text::Builder getTopic();
  inline void setTopic( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTopic(unsigned int size);
  inline void adoptTopic(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTopic();

  inline  ::int32_t getId();
  inline void setId( ::int32_t value);

  inline bool hasRequest();
  inline  ::curious::message::Request::Builder getRequest();
  inline void setRequest( ::curious::message::Request::Reader value);
  inline  ::curious::message::Request::Builder initRequest();
  inline void adoptRequest(::capnp::Orphan< ::curious::message::Request>&& value);
  inline ::capnp::Orphan< ::curious::message::Request> disownRequest();

  inline bool hasResponse();
  inline  ::capnp::Text::Builder getResponse();
  inline void setResponse( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initResponse(unsigned int size);
  inline void adoptResponse(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownResponse();

  inline  ::int32_t getResponseTest();
  inline void setResponseTest( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestReply::Pipeline {
public:
  typedef TestReply Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::curious::message::Request::Pipeline getRequest();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class TestRequest::Reader {
public:
  typedef TestRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::curious::message::MessageType getMsgType() const;

  inline bool hasTopic() const;
  inline  ::capnp::Text::Reader getTopic() const;

  inline  ::int32_t getId() const;

  inline bool hasReqGeneratedIp() const;
  inline  ::capnp::Text::Reader getReqGeneratedIp() const;

  inline bool hasReqGeneratedPort() const;
  inline  ::capnp::Text::Reader getReqGeneratedPort() const;

  inline bool hasMessage() const;
  inline  ::capnp::Text::Reader getMessage() const;

  inline bool hasUser() const;
  inline  ::capnp::Text::Reader getUser() const;

  inline  ::int32_t getAge() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class TestRequest::Builder {
public:
  typedef TestRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::curious::message::MessageType getMsgType();
  inline void setMsgType( ::curious::message::MessageType value);

  inline bool hasTopic();
  inline  ::capnp::Text::Builder getTopic();
  inline void setTopic( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTopic(unsigned int size);
  inline void adoptTopic(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTopic();

  inline  ::int32_t getId();
  inline void setId( ::int32_t value);

  inline bool hasReqGeneratedIp();
  inline  ::capnp::Text::Builder getReqGeneratedIp();
  inline void setReqGeneratedIp( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initReqGeneratedIp(unsigned int size);
  inline void adoptReqGeneratedIp(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownReqGeneratedIp();

  inline bool hasReqGeneratedPort();
  inline  ::capnp::Text::Builder getReqGeneratedPort();
  inline void setReqGeneratedPort( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initReqGeneratedPort(unsigned int size);
  inline void adoptReqGeneratedPort(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownReqGeneratedPort();

  inline bool hasMessage();
  inline  ::capnp::Text::Builder getMessage();
  inline void setMessage( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initMessage(unsigned int size);
  inline void adoptMessage(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownMessage();

  inline bool hasUser();
  inline  ::capnp::Text::Builder getUser();
  inline void setUser( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initUser(unsigned int size);
  inline void adoptUser(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownUser();

  inline  ::int32_t getAge();
  inline void setAge( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class TestRequest::Pipeline {
public:
  typedef TestRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class YoutubeBlog::Reader {
public:
  typedef YoutubeBlog Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::curious::message::MessageType getMsgType() const;

  inline bool hasTopic() const;
  inline  ::capnp::Text::Reader getTopic() const;

  inline bool hasBlogId() const;
  inline  ::capnp::Text::Reader getBlogId() const;

  inline bool hasTitle() const;
  inline  ::capnp::Text::Reader getTitle() const;

  inline bool hasSlug() const;
  inline  ::capnp::Text::Reader getSlug() const;

  inline bool hasCoverImageUrl() const;
  inline  ::capnp::Text::Reader getCoverImageUrl() const;

  inline bool hasPublishedDate() const;
  inline  ::capnp::Text::Reader getPublishedDate() const;

  inline bool hasContentHtml() const;
  inline  ::capnp::Text::Reader getContentHtml() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class YoutubeBlog::Builder {
public:
  typedef YoutubeBlog Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::curious::message::MessageType getMsgType();
  inline void setMsgType( ::curious::message::MessageType value);

  inline bool hasTopic();
  inline  ::capnp::Text::Builder getTopic();
  inline void setTopic( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTopic(unsigned int size);
  inline void adoptTopic(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTopic();

  inline bool hasBlogId();
  inline  ::capnp::Text::Builder getBlogId();
  inline void setBlogId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initBlogId(unsigned int size);
  inline void adoptBlogId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownBlogId();

  inline bool hasTitle();
  inline  ::capnp::Text::Builder getTitle();
  inline void setTitle( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTitle(unsigned int size);
  inline void adoptTitle(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTitle();

  inline bool hasSlug();
  inline  ::capnp::Text::Builder getSlug();
  inline void setSlug( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initSlug(unsigned int size);
  inline void adoptSlug(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownSlug();

  inline bool hasCoverImageUrl();
  inline  ::capnp::Text::Builder getCoverImageUrl();
  inline void setCoverImageUrl( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initCoverImageUrl(unsigned int size);
  inline void adoptCoverImageUrl(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownCoverImageUrl();

  inline bool hasPublishedDate();
  inline  ::capnp::Text::Builder getPublishedDate();
  inline void setPublishedDate( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initPublishedDate(unsigned int size);
  inline void adoptPublishedDate(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownPublishedDate();

  inline bool hasContentHtml();
  inline  ::capnp::Text::Builder getContentHtml();
  inline void setContentHtml( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initContentHtml(unsigned int size);
  inline void adoptContentHtml(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownContentHtml();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class YoutubeBlog::Pipeline {
public:
  typedef YoutubeBlog Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class YoutubeBlogHeartbeat::Reader {
public:
  typedef YoutubeBlogHeartbeat Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::curious::message::MessageType getMsgType() const;

  inline bool hasTopic() const;
  inline  ::capnp::Text::Reader getTopic() const;

  inline  ::int32_t getResourcesCount() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class YoutubeBlogHeartbeat::Builder {
public:
  typedef YoutubeBlogHeartbeat Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::curious::message::MessageType getMsgType();
  inline void setMsgType( ::curious::message::MessageType value);

  inline bool hasTopic();
  inline  ::capnp::Text::Builder getTopic();
  inline void setTopic( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTopic(unsigned int size);
  inline void adoptTopic(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTopic();

  inline  ::int32_t getResourcesCount();
  inline void setResourcesCount( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class YoutubeBlogHeartbeat::Pipeline {
public:
  typedef YoutubeBlogHeartbeat Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class YoutubeBlogSnapshotRequest::Reader {
public:
  typedef YoutubeBlogSnapshotRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::curious::message::MessageType getMsgType() const;

  inline bool hasTopic() const;
  inline  ::capnp::Text::Reader getTopic() const;

  inline  ::int32_t getId() const;

  inline bool hasReqGeneratedIp() const;
  inline  ::capnp::Text::Reader getReqGeneratedIp() const;

  inline bool hasReqGeneratedPort() const;
  inline  ::capnp::Text::Reader getReqGeneratedPort() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class YoutubeBlogSnapshotRequest::Builder {
public:
  typedef YoutubeBlogSnapshotRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::curious::message::MessageType getMsgType();
  inline void setMsgType( ::curious::message::MessageType value);

  inline bool hasTopic();
  inline  ::capnp::Text::Builder getTopic();
  inline void setTopic( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTopic(unsigned int size);
  inline void adoptTopic(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTopic();

  inline  ::int32_t getId();
  inline void setId( ::int32_t value);

  inline bool hasReqGeneratedIp();
  inline  ::capnp::Text::Builder getReqGeneratedIp();
  inline void setReqGeneratedIp( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initReqGeneratedIp(unsigned int size);
  inline void adoptReqGeneratedIp(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownReqGeneratedIp();

  inline bool hasReqGeneratedPort();
  inline  ::capnp::Text::Builder getReqGeneratedPort();
  inline void setReqGeneratedPort( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initReqGeneratedPort(unsigned int size);
  inline void adoptReqGeneratedPort(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownReqGeneratedPort();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class YoutubeBlogSnapshotRequest::Pipeline {
public:
  typedef YoutubeBlogSnapshotRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class YoutubeBlogSnapshotResponse::Reader {
public:
  typedef YoutubeBlogSnapshotResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::curious::message::MessageType getMsgType() const;

  inline bool hasTopic() const;
  inline  ::capnp::Text::Reader getTopic() const;

  inline  ::int32_t getId() const;

  inline bool hasRequest() const;
  inline  ::curious::message::Request::Reader getRequest() const;

  inline bool hasBlogs() const;
  inline  ::capnp::List< ::curious::message::YoutubeBlog,  ::capnp::Kind::STRUCT>::Reader getBlogs() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class YoutubeBlogSnapshotResponse::Builder {
public:
  typedef YoutubeBlogSnapshotResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::curious::message::MessageType getMsgType();
  inline void setMsgType( ::curious::message::MessageType value);

  inline bool hasTopic();
  inline  ::capnp::Text::Builder getTopic();
  inline void setTopic( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTopic(unsigned int size);
  inline void adoptTopic(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTopic();

  inline  ::int32_t getId();
  inline void setId( ::int32_t value);

  inline bool hasRequest();
  inline  ::curious::message::Request::Builder getRequest();
  inline void setRequest( ::curious::message::Request::Reader value);
  inline  ::curious::message::Request::Builder initRequest();
  inline void adoptRequest(::capnp::Orphan< ::curious::message::Request>&& value);
  inline ::capnp::Orphan< ::curious::message::Request> disownRequest();

  inline bool hasBlogs();
  inline  ::capnp::List< ::curious::message::YoutubeBlog,  ::capnp::Kind::STRUCT>::Builder getBlogs();
  inline void setBlogs( ::capnp::List< ::curious::message::YoutubeBlog,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::curious::message::YoutubeBlog,  ::capnp::Kind::STRUCT>::Builder initBlogs(unsigned int size);
  inline void adoptBlogs(::capnp::Orphan< ::capnp::List< ::curious::message::YoutubeBlog,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::curious::message::YoutubeBlog,  ::capnp::Kind::STRUCT>> disownBlogs();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class YoutubeBlogSnapshotResponse::Pipeline {
public:
  typedef YoutubeBlogSnapshotResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::curious::message::Request::Pipeline getRequest();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class YoutubeBlogUpdates::Reader {
public:
  typedef YoutubeBlogUpdates Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::curious::message::MessageType getMsgType() const;

  inline bool hasTopic() const;
  inline  ::capnp::Text::Reader getTopic() const;

  inline bool hasUpdates() const;
  inline  ::capnp::List< ::curious::message::YoutubeBlog,  ::capnp::Kind::STRUCT>::Reader getUpdates() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class YoutubeBlogUpdates::Builder {
public:
  typedef YoutubeBlogUpdates Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::curious::message::MessageType getMsgType();
  inline void setMsgType( ::curious::message::MessageType value);

  inline bool hasTopic();
  inline  ::capnp::Text::Builder getTopic();
  inline void setTopic( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTopic(unsigned int size);
  inline void adoptTopic(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTopic();

  inline bool hasUpdates();
  inline  ::capnp::List< ::curious::message::YoutubeBlog,  ::capnp::Kind::STRUCT>::Builder getUpdates();
  inline void setUpdates( ::capnp::List< ::curious::message::YoutubeBlog,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::curious::message::YoutubeBlog,  ::capnp::Kind::STRUCT>::Builder initUpdates(unsigned int size);
  inline void adoptUpdates(::capnp::Orphan< ::capnp::List< ::curious::message::YoutubeBlog,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::curious::message::YoutubeBlog,  ::capnp::Kind::STRUCT>> disownUpdates();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class YoutubeBlogUpdates::Pipeline {
public:
  typedef YoutubeBlogUpdates Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class YoutubeResource::Reader {
public:
  typedef YoutubeResource Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::curious::message::MessageType getMsgType() const;

  inline bool hasTopic() const;
  inline  ::capnp::Text::Reader getTopic() const;

  inline bool hasResourceId() const;
  inline  ::capnp::Text::Reader getResourceId() const;

  inline bool hasTitle() const;
  inline  ::capnp::Text::Reader getTitle() const;

  inline bool hasData() const;
  inline  ::capnp::Text::Reader getData() const;

  inline bool hasDescription() const;
  inline  ::capnp::Text::Reader getDescription() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class YoutubeResource::Builder {
public:
  typedef YoutubeResource Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::curious::message::MessageType getMsgType();
  inline void setMsgType( ::curious::message::MessageType value);

  inline bool hasTopic();
  inline  ::capnp::Text::Builder getTopic();
  inline void setTopic( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTopic(unsigned int size);
  inline void adoptTopic(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTopic();

  inline bool hasResourceId();
  inline  ::capnp::Text::Builder getResourceId();
  inline void setResourceId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initResourceId(unsigned int size);
  inline void adoptResourceId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownResourceId();

  inline bool hasTitle();
  inline  ::capnp::Text::Builder getTitle();
  inline void setTitle( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTitle(unsigned int size);
  inline void adoptTitle(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTitle();

  inline bool hasData();
  inline  ::capnp::Text::Builder getData();
  inline void setData( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initData(unsigned int size);
  inline void adoptData(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownData();

  inline bool hasDescription();
  inline  ::capnp::Text::Builder getDescription();
  inline void setDescription( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDescription(unsigned int size);
  inline void adoptDescription(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDescription();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class YoutubeResource::Pipeline {
public:
  typedef YoutubeResource Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class YoutubeResourceHeartbeat::Reader {
public:
  typedef YoutubeResourceHeartbeat Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::curious::message::MessageType getMsgType() const;

  inline bool hasTopic() const;
  inline  ::capnp::Text::Reader getTopic() const;

  inline  ::int32_t getResourcesCount() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class YoutubeResourceHeartbeat::Builder {
public:
  typedef YoutubeResourceHeartbeat Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::curious::message::MessageType getMsgType();
  inline void setMsgType( ::curious::message::MessageType value);

  inline bool hasTopic();
  inline  ::capnp::Text::Builder getTopic();
  inline void setTopic( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTopic(unsigned int size);
  inline void adoptTopic(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTopic();

  inline  ::int32_t getResourcesCount();
  inline void setResourcesCount( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class YoutubeResourceHeartbeat::Pipeline {
public:
  typedef YoutubeResourceHeartbeat Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class YoutubeResourceSnapshotRequest::Reader {
public:
  typedef YoutubeResourceSnapshotRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::curious::message::MessageType getMsgType() const;

  inline bool hasTopic() const;
  inline  ::capnp::Text::Reader getTopic() const;

  inline  ::int32_t getId() const;

  inline bool hasReqGeneratedIp() const;
  inline  ::capnp::Text::Reader getReqGeneratedIp() const;

  inline bool hasReqGeneratedPort() const;
  inline  ::capnp::Text::Reader getReqGeneratedPort() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class YoutubeResourceSnapshotRequest::Builder {
public:
  typedef YoutubeResourceSnapshotRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::curious::message::MessageType getMsgType();
  inline void setMsgType( ::curious::message::MessageType value);

  inline bool hasTopic();
  inline  ::capnp::Text::Builder getTopic();
  inline void setTopic( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTopic(unsigned int size);
  inline void adoptTopic(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTopic();

  inline  ::int32_t getId();
  inline void setId( ::int32_t value);

  inline bool hasReqGeneratedIp();
  inline  ::capnp::Text::Builder getReqGeneratedIp();
  inline void setReqGeneratedIp( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initReqGeneratedIp(unsigned int size);
  inline void adoptReqGeneratedIp(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownReqGeneratedIp();

  inline bool hasReqGeneratedPort();
  inline  ::capnp::Text::Builder getReqGeneratedPort();
  inline void setReqGeneratedPort( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initReqGeneratedPort(unsigned int size);
  inline void adoptReqGeneratedPort(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownReqGeneratedPort();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class YoutubeResourceSnapshotRequest::Pipeline {
public:
  typedef YoutubeResourceSnapshotRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class YoutubeResourceSnapshotResponse::Reader {
public:
  typedef YoutubeResourceSnapshotResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::curious::message::MessageType getMsgType() const;

  inline bool hasTopic() const;
  inline  ::capnp::Text::Reader getTopic() const;

  inline  ::int32_t getId() const;

  inline bool hasRequest() const;
  inline  ::curious::message::Request::Reader getRequest() const;

  inline bool hasResources() const;
  inline  ::capnp::List< ::curious::message::YoutubeResource,  ::capnp::Kind::STRUCT>::Reader getResources() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class YoutubeResourceSnapshotResponse::Builder {
public:
  typedef YoutubeResourceSnapshotResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::curious::message::MessageType getMsgType();
  inline void setMsgType( ::curious::message::MessageType value);

  inline bool hasTopic();
  inline  ::capnp::Text::Builder getTopic();
  inline void setTopic( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTopic(unsigned int size);
  inline void adoptTopic(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTopic();

  inline  ::int32_t getId();
  inline void setId( ::int32_t value);

  inline bool hasRequest();
  inline  ::curious::message::Request::Builder getRequest();
  inline void setRequest( ::curious::message::Request::Reader value);
  inline  ::curious::message::Request::Builder initRequest();
  inline void adoptRequest(::capnp::Orphan< ::curious::message::Request>&& value);
  inline ::capnp::Orphan< ::curious::message::Request> disownRequest();

  inline bool hasResources();
  inline  ::capnp::List< ::curious::message::YoutubeResource,  ::capnp::Kind::STRUCT>::Builder getResources();
  inline void setResources( ::capnp::List< ::curious::message::YoutubeResource,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::curious::message::YoutubeResource,  ::capnp::Kind::STRUCT>::Builder initResources(unsigned int size);
  inline void adoptResources(::capnp::Orphan< ::capnp::List< ::curious::message::YoutubeResource,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::curious::message::YoutubeResource,  ::capnp::Kind::STRUCT>> disownResources();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class YoutubeResourceSnapshotResponse::Pipeline {
public:
  typedef YoutubeResourceSnapshotResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::curious::message::Request::Pipeline getRequest();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class YoutubeResourceUpdates::Reader {
public:
  typedef YoutubeResourceUpdates Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::curious::message::MessageType getMsgType() const;

  inline bool hasTopic() const;
  inline  ::capnp::Text::Reader getTopic() const;

  inline bool hasUpdates() const;
  inline  ::capnp::List< ::curious::message::YoutubeResource,  ::capnp::Kind::STRUCT>::Reader getUpdates() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class YoutubeResourceUpdates::Builder {
public:
  typedef YoutubeResourceUpdates Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::curious::message::MessageType getMsgType();
  inline void setMsgType( ::curious::message::MessageType value);

  inline bool hasTopic();
  inline  ::capnp::Text::Builder getTopic();
  inline void setTopic( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTopic(unsigned int size);
  inline void adoptTopic(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTopic();

  inline bool hasUpdates();
  inline  ::capnp::List< ::curious::message::YoutubeResource,  ::capnp::Kind::STRUCT>::Builder getUpdates();
  inline void setUpdates( ::capnp::List< ::curious::message::YoutubeResource,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::curious::message::YoutubeResource,  ::capnp::Kind::STRUCT>::Builder initUpdates(unsigned int size);
  inline void adoptUpdates(::capnp::Orphan< ::capnp::List< ::curious::message::YoutubeResource,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::curious::message::YoutubeResource,  ::capnp::Kind::STRUCT>> disownUpdates();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class YoutubeResourceUpdates::Pipeline {
public:
  typedef YoutubeResourceUpdates Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class YoutubeVideo::Reader {
public:
  typedef YoutubeVideo Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::curious::message::MessageType getMsgType() const;

  inline bool hasTopic() const;
  inline  ::capnp::Text::Reader getTopic() const;

  inline bool hasVideoId() const;
  inline  ::capnp::Text::Reader getVideoId() const;

  inline bool hasTitle() const;
  inline  ::capnp::Text::Reader getTitle() const;

  inline bool hasThumbnail() const;
  inline  ::capnp::Text::Reader getThumbnail() const;

  inline bool hasThumbnailMedium() const;
  inline  ::capnp::Text::Reader getThumbnailMedium() const;

  inline bool hasThumbnailHigh() const;
  inline  ::capnp::Text::Reader getThumbnailHigh() const;

  inline bool hasThumbnailStandard() const;
  inline  ::capnp::Text::Reader getThumbnailStandard() const;

  inline bool hasThumbnailMaxres() const;
  inline  ::capnp::Text::Reader getThumbnailMaxres() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class YoutubeVideo::Builder {
public:
  typedef YoutubeVideo Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::curious::message::MessageType getMsgType();
  inline void setMsgType( ::curious::message::MessageType value);

  inline bool hasTopic();
  inline  ::capnp::Text::Builder getTopic();
  inline void setTopic( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTopic(unsigned int size);
  inline void adoptTopic(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTopic();

  inline bool hasVideoId();
  inline  ::capnp::Text::Builder getVideoId();
  inline void setVideoId( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initVideoId(unsigned int size);
  inline void adoptVideoId(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownVideoId();

  inline bool hasTitle();
  inline  ::capnp::Text::Builder getTitle();
  inline void setTitle( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTitle(unsigned int size);
  inline void adoptTitle(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTitle();

  inline bool hasThumbnail();
  inline  ::capnp::Text::Builder getThumbnail();
  inline void setThumbnail( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initThumbnail(unsigned int size);
  inline void adoptThumbnail(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownThumbnail();

  inline bool hasThumbnailMedium();
  inline  ::capnp::Text::Builder getThumbnailMedium();
  inline void setThumbnailMedium( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initThumbnailMedium(unsigned int size);
  inline void adoptThumbnailMedium(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownThumbnailMedium();

  inline bool hasThumbnailHigh();
  inline  ::capnp::Text::Builder getThumbnailHigh();
  inline void setThumbnailHigh( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initThumbnailHigh(unsigned int size);
  inline void adoptThumbnailHigh(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownThumbnailHigh();

  inline bool hasThumbnailStandard();
  inline  ::capnp::Text::Builder getThumbnailStandard();
  inline void setThumbnailStandard( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initThumbnailStandard(unsigned int size);
  inline void adoptThumbnailStandard(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownThumbnailStandard();

  inline bool hasThumbnailMaxres();
  inline  ::capnp::Text::Builder getThumbnailMaxres();
  inline void setThumbnailMaxres( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initThumbnailMaxres(unsigned int size);
  inline void adoptThumbnailMaxres(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownThumbnailMaxres();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class YoutubeVideo::Pipeline {
public:
  typedef YoutubeVideo Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class YoutubeVideoHeartbeat::Reader {
public:
  typedef YoutubeVideoHeartbeat Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::curious::message::MessageType getMsgType() const;

  inline bool hasTopic() const;
  inline  ::capnp::Text::Reader getTopic() const;

  inline  ::int32_t getVideosCount() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class YoutubeVideoHeartbeat::Builder {
public:
  typedef YoutubeVideoHeartbeat Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::curious::message::MessageType getMsgType();
  inline void setMsgType( ::curious::message::MessageType value);

  inline bool hasTopic();
  inline  ::capnp::Text::Builder getTopic();
  inline void setTopic( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTopic(unsigned int size);
  inline void adoptTopic(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTopic();

  inline  ::int32_t getVideosCount();
  inline void setVideosCount( ::int32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class YoutubeVideoHeartbeat::Pipeline {
public:
  typedef YoutubeVideoHeartbeat Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class YoutubeVideoSnapshotRequest::Reader {
public:
  typedef YoutubeVideoSnapshotRequest Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::curious::message::MessageType getMsgType() const;

  inline bool hasTopic() const;
  inline  ::capnp::Text::Reader getTopic() const;

  inline  ::int32_t getId() const;

  inline bool hasReqGeneratedIp() const;
  inline  ::capnp::Text::Reader getReqGeneratedIp() const;

  inline bool hasReqGeneratedPort() const;
  inline  ::capnp::Text::Reader getReqGeneratedPort() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class YoutubeVideoSnapshotRequest::Builder {
public:
  typedef YoutubeVideoSnapshotRequest Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::curious::message::MessageType getMsgType();
  inline void setMsgType( ::curious::message::MessageType value);

  inline bool hasTopic();
  inline  ::capnp::Text::Builder getTopic();
  inline void setTopic( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTopic(unsigned int size);
  inline void adoptTopic(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTopic();

  inline  ::int32_t getId();
  inline void setId( ::int32_t value);

  inline bool hasReqGeneratedIp();
  inline  ::capnp::Text::Builder getReqGeneratedIp();
  inline void setReqGeneratedIp( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initReqGeneratedIp(unsigned int size);
  inline void adoptReqGeneratedIp(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownReqGeneratedIp();

  inline bool hasReqGeneratedPort();
  inline  ::capnp::Text::Builder getReqGeneratedPort();
  inline void setReqGeneratedPort( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initReqGeneratedPort(unsigned int size);
  inline void adoptReqGeneratedPort(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownReqGeneratedPort();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class YoutubeVideoSnapshotRequest::Pipeline {
public:
  typedef YoutubeVideoSnapshotRequest Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class YoutubeVideoSnapshotResponse::Reader {
public:
  typedef YoutubeVideoSnapshotResponse Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::curious::message::MessageType getMsgType() const;

  inline bool hasTopic() const;
  inline  ::capnp::Text::Reader getTopic() const;

  inline  ::int32_t getId() const;

  inline bool hasRequest() const;
  inline  ::curious::message::Request::Reader getRequest() const;

  inline bool hasVideos() const;
  inline  ::capnp::List< ::curious::message::YoutubeVideo,  ::capnp::Kind::STRUCT>::Reader getVideos() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class YoutubeVideoSnapshotResponse::Builder {
public:
  typedef YoutubeVideoSnapshotResponse Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::curious::message::MessageType getMsgType();
  inline void setMsgType( ::curious::message::MessageType value);

  inline bool hasTopic();
  inline  ::capnp::Text::Builder getTopic();
  inline void setTopic( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTopic(unsigned int size);
  inline void adoptTopic(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTopic();

  inline  ::int32_t getId();
  inline void setId( ::int32_t value);

  inline bool hasRequest();
  inline  ::curious::message::Request::Builder getRequest();
  inline void setRequest( ::curious::message::Request::Reader value);
  inline  ::curious::message::Request::Builder initRequest();
  inline void adoptRequest(::capnp::Orphan< ::curious::message::Request>&& value);
  inline ::capnp::Orphan< ::curious::message::Request> disownRequest();

  inline bool hasVideos();
  inline  ::capnp::List< ::curious::message::YoutubeVideo,  ::capnp::Kind::STRUCT>::Builder getVideos();
  inline void setVideos( ::capnp::List< ::curious::message::YoutubeVideo,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::curious::message::YoutubeVideo,  ::capnp::Kind::STRUCT>::Builder initVideos(unsigned int size);
  inline void adoptVideos(::capnp::Orphan< ::capnp::List< ::curious::message::YoutubeVideo,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::curious::message::YoutubeVideo,  ::capnp::Kind::STRUCT>> disownVideos();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class YoutubeVideoSnapshotResponse::Pipeline {
public:
  typedef YoutubeVideoSnapshotResponse Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline  ::curious::message::Request::Pipeline getRequest();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class YoutubeVideoUpdates::Reader {
public:
  typedef YoutubeVideoUpdates Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::curious::message::MessageType getMsgType() const;

  inline bool hasTopic() const;
  inline  ::capnp::Text::Reader getTopic() const;

  inline bool hasVideos() const;
  inline  ::capnp::List< ::curious::message::YoutubeVideo,  ::capnp::Kind::STRUCT>::Reader getVideos() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class YoutubeVideoUpdates::Builder {
public:
  typedef YoutubeVideoUpdates Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::curious::message::MessageType getMsgType();
  inline void setMsgType( ::curious::message::MessageType value);

  inline bool hasTopic();
  inline  ::capnp::Text::Builder getTopic();
  inline void setTopic( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initTopic(unsigned int size);
  inline void adoptTopic(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownTopic();

  inline bool hasVideos();
  inline  ::capnp::List< ::curious::message::YoutubeVideo,  ::capnp::Kind::STRUCT>::Builder getVideos();
  inline void setVideos( ::capnp::List< ::curious::message::YoutubeVideo,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::curious::message::YoutubeVideo,  ::capnp::Kind::STRUCT>::Builder initVideos(unsigned int size);
  inline void adoptVideos(::capnp::Orphan< ::capnp::List< ::curious::message::YoutubeVideo,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::curious::message::YoutubeVideo,  ::capnp::Kind::STRUCT>> disownVideos();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class YoutubeVideoUpdates::Pipeline {
public:
  typedef YoutubeVideoUpdates Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

template <typename Key, typename Value>
inline bool Map<Key, Value>::Reader::hasEntries() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
template <typename Key, typename Value>
inline bool Map<Key, Value>::Builder::hasEntries() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
template <typename Key, typename Value>
inline typename  ::capnp::List<typename  ::curious::message::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>::Reader Map<Key, Value>::Reader::getEntries() const {
  return ::capnp::_::PointerHelpers< ::capnp::List<typename  ::curious::message::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename Key, typename Value>
inline typename  ::capnp::List<typename  ::curious::message::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>::Builder Map<Key, Value>::Builder::getEntries() {
  return ::capnp::_::PointerHelpers< ::capnp::List<typename  ::curious::message::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename Key, typename Value>
inline void Map<Key, Value>::Builder::setEntries(typename  ::capnp::List<typename  ::curious::message::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List<typename  ::curious::message::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
template <typename Key, typename Value>
inline typename  ::capnp::List<typename  ::curious::message::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>::Builder Map<Key, Value>::Builder::initEntries(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List<typename  ::curious::message::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
template <typename Key, typename Value>
inline void Map<Key, Value>::Builder::adoptEntries(
    ::capnp::Orphan< ::capnp::List<typename  ::curious::message::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List<typename  ::curious::message::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
template <typename Key, typename Value>
inline ::capnp::Orphan< ::capnp::List<typename  ::curious::message::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>> Map<Key, Value>::Builder::disownEntries() {
  return ::capnp::_::PointerHelpers< ::capnp::List<typename  ::curious::message::Map<Key, Value>::Entry,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

template <typename Key, typename Value>
inline bool Map<Key, Value>::Entry::Reader::hasKey() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
template <typename Key, typename Value>
inline bool Map<Key, Value>::Entry::Builder::hasKey() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
template <typename Key, typename Value>
inline  ::capnp::ReaderFor<Key> Map<Key, Value>::Entry::Reader::getKey() const {
  return ::capnp::_::PointerHelpers<Key>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename Key, typename Value>
inline  ::capnp::BuilderFor<Key> Map<Key, Value>::Entry::Builder::getKey() {
  return ::capnp::_::PointerHelpers<Key>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename Key, typename Value>
inline  ::capnp::PipelineFor<Key> Map<Key, Value>::Entry::Pipeline::getKey() {
  return  ::capnp::PipelineFor<Key>(_typeless.getPointerField(0));
}
#endif  // !CAPNP_LITE
template <typename Key, typename Value>
inline void Map<Key, Value>::Entry::Builder::setKey( ::capnp::ReaderFor<Key> value) {
  ::capnp::_::PointerHelpers<Key>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
template <typename Key, typename Value>
inline  ::capnp::BuilderFor<Key> Map<Key, Value>::Entry::Builder::initKey() {
  return ::capnp::_::PointerHelpers<Key>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
template <typename Key, typename Value>
inline  ::capnp::BuilderFor<Key> Map<Key, Value>::Entry::Builder::initKey(unsigned int size) {
  return ::capnp::_::PointerHelpers<Key>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
template <typename Key, typename Value>
inline void Map<Key, Value>::Entry::Builder::adoptKey(
    ::capnp::Orphan<Key>&& value) {
  ::capnp::_::PointerHelpers<Key>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
template <typename Key, typename Value>
inline ::capnp::Orphan<Key> Map<Key, Value>::Entry::Builder::disownKey() {
  return ::capnp::_::PointerHelpers<Key>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

template <typename Key, typename Value>
inline bool Map<Key, Value>::Entry::Reader::hasValue() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
template <typename Key, typename Value>
inline bool Map<Key, Value>::Entry::Builder::hasValue() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
template <typename Key, typename Value>
inline  ::capnp::ReaderFor<Value> Map<Key, Value>::Entry::Reader::getValue() const {
  return ::capnp::_::PointerHelpers<Value>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
template <typename Key, typename Value>
inline  ::capnp::BuilderFor<Value> Map<Key, Value>::Entry::Builder::getValue() {
  return ::capnp::_::PointerHelpers<Value>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
template <typename Key, typename Value>
inline  ::capnp::PipelineFor<Value> Map<Key, Value>::Entry::Pipeline::getValue() {
  return  ::capnp::PipelineFor<Value>(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
template <typename Key, typename Value>
inline void Map<Key, Value>::Entry::Builder::setValue( ::capnp::ReaderFor<Value> value) {
  ::capnp::_::PointerHelpers<Value>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
template <typename Key, typename Value>
inline  ::capnp::BuilderFor<Value> Map<Key, Value>::Entry::Builder::initValue() {
  return ::capnp::_::PointerHelpers<Value>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
template <typename Key, typename Value>
inline  ::capnp::BuilderFor<Value> Map<Key, Value>::Entry::Builder::initValue(unsigned int size) {
  return ::capnp::_::PointerHelpers<Value>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
template <typename Key, typename Value>
inline void Map<Key, Value>::Entry::Builder::adoptValue(
    ::capnp::Orphan<Value>&& value) {
  ::capnp::_::PointerHelpers<Value>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
template <typename Key, typename Value>
inline ::capnp::Orphan<Value> Map<Key, Value>::Entry::Builder::disownValue() {
  return ::capnp::_::PointerHelpers<Value>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

// Map<Key, Value>::Entry
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
template <typename Key, typename Value>
constexpr uint16_t Map<Key, Value>::Entry::_capnpPrivate::dataWordSize;
template <typename Key, typename Value>
constexpr uint16_t Map<Key, Value>::Entry::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
template <typename Key, typename Value>
constexpr ::capnp::Kind Map<Key, Value>::Entry::_capnpPrivate::kind;
template <typename Key, typename Value>
constexpr ::capnp::_::RawSchema const* Map<Key, Value>::Entry::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema::Scope Map<Key, Value>::Entry::_capnpPrivate::brandScopes[] = {
  { 0xee7632df027672d3, brandBindings + 0, 2, false},
};
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema::Binding Map<Key, Value>::Entry::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<Key>(),
  ::capnp::_::brandBindingFor<Value>(),
};
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema Map<Key, Value>::Entry::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_c95b9f4bd61d0ad2, brandScopes, nullptr,
  1, 0, nullptr
};
#endif  // !CAPNP_LITE

// Map<Key, Value>
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
template <typename Key, typename Value>
constexpr uint16_t Map<Key, Value>::_capnpPrivate::dataWordSize;
template <typename Key, typename Value>
constexpr uint16_t Map<Key, Value>::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
template <typename Key, typename Value>
constexpr ::capnp::Kind Map<Key, Value>::_capnpPrivate::kind;
template <typename Key, typename Value>
constexpr ::capnp::_::RawSchema const* Map<Key, Value>::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema::Scope Map<Key, Value>::_capnpPrivate::brandScopes[] = {
  { 0xee7632df027672d3, brandBindings + 0, 2, false},
};
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema::Binding Map<Key, Value>::_capnpPrivate::brandBindings[] = {
  ::capnp::_::brandBindingFor<Key>(),
  ::capnp::_::brandBindingFor<Value>(),
};
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema::Dependency Map<Key, Value>::_capnpPrivate::brandDependencies[] = {
  { 16777216,  ::curious::message::Map<Key, Value>::Entry::_capnpPrivate::brand() },
};
template <typename Key, typename Value>
const ::capnp::_::RawBrandedSchema Map<Key, Value>::_capnpPrivate::specificBrand = {
  &::capnp::schemas::s_ee7632df027672d3, brandScopes, brandDependencies,
  1, 1, nullptr
};
#endif  // !CAPNP_LITE

inline  ::curious::message::MessageType NetworkMessage::Reader::getMsgType() const {
  return _reader.getDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::curious::message::MessageType NetworkMessage::Builder::getMsgType() {
  return _builder.getDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void NetworkMessage::Builder::setMsgType( ::curious::message::MessageType value) {
  _builder.setDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool NetworkMessage::Reader::hasTopic() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool NetworkMessage::Builder::hasTopic() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader NetworkMessage::Reader::getTopic() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder NetworkMessage::Builder::getTopic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void NetworkMessage::Builder::setTopic( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder NetworkMessage::Builder::initTopic(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void NetworkMessage::Builder::adoptTopic(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> NetworkMessage::Builder::disownTopic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::curious::message::MessageType Reply::Reader::getMsgType() const {
  return _reader.getDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::curious::message::MessageType Reply::Builder::getMsgType() {
  return _builder.getDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Reply::Builder::setMsgType( ::curious::message::MessageType value) {
  _builder.setDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Reply::Reader::hasTopic() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Reply::Builder::hasTopic() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Reply::Reader::getTopic() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Reply::Builder::getTopic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Reply::Builder::setTopic( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Reply::Builder::initTopic(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Reply::Builder::adoptTopic(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Reply::Builder::disownTopic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t Reply::Reader::getId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Reply::Builder::getId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Reply::Builder::setId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Reply::Reader::hasRequest() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Reply::Builder::hasRequest() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::curious::message::Request::Reader Reply::Reader::getRequest() const {
  return ::capnp::_::PointerHelpers< ::curious::message::Request>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::curious::message::Request::Builder Reply::Builder::getRequest() {
  return ::capnp::_::PointerHelpers< ::curious::message::Request>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::curious::message::Request::Pipeline Reply::Pipeline::getRequest() {
  return  ::curious::message::Request::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void Reply::Builder::setRequest( ::curious::message::Request::Reader value) {
  ::capnp::_::PointerHelpers< ::curious::message::Request>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::curious::message::Request::Builder Reply::Builder::initRequest() {
  return ::capnp::_::PointerHelpers< ::curious::message::Request>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Reply::Builder::adoptRequest(
    ::capnp::Orphan< ::curious::message::Request>&& value) {
  ::capnp::_::PointerHelpers< ::curious::message::Request>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::curious::message::Request> Reply::Builder::disownRequest() {
  return ::capnp::_::PointerHelpers< ::curious::message::Request>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::curious::message::MessageType Request::Reader::getMsgType() const {
  return _reader.getDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::curious::message::MessageType Request::Builder::getMsgType() {
  return _builder.getDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Request::Builder::setMsgType( ::curious::message::MessageType value) {
  _builder.setDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Request::Reader::hasTopic() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Request::Builder::hasTopic() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Request::Reader::getTopic() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Request::Builder::getTopic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Request::Builder::setTopic( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Request::Builder::initTopic(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Request::Builder::adoptTopic(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Request::Builder::disownTopic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t Request::Reader::getId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t Request::Builder::getId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Request::Builder::setId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Request::Reader::hasReqGeneratedIp() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool Request::Builder::hasReqGeneratedIp() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Request::Reader::getReqGeneratedIp() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Request::Builder::getReqGeneratedIp() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Request::Builder::setReqGeneratedIp( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Request::Builder::initReqGeneratedIp(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void Request::Builder::adoptReqGeneratedIp(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Request::Builder::disownReqGeneratedIp() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Request::Reader::hasReqGeneratedPort() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool Request::Builder::hasReqGeneratedPort() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Request::Reader::getReqGeneratedPort() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Request::Builder::getReqGeneratedPort() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Request::Builder::setReqGeneratedPort( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Request::Builder::initReqGeneratedPort(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void Request::Builder::adoptReqGeneratedPort(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Request::Builder::disownReqGeneratedPort() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::curious::message::MessageType TestReply::Reader::getMsgType() const {
  return _reader.getDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::curious::message::MessageType TestReply::Builder::getMsgType() {
  return _builder.getDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TestReply::Builder::setMsgType( ::curious::message::MessageType value) {
  _builder.setDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool TestReply::Reader::hasTopic() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TestReply::Builder::hasTopic() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestReply::Reader::getTopic() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestReply::Builder::getTopic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TestReply::Builder::setTopic( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestReply::Builder::initTopic(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void TestReply::Builder::adoptTopic(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestReply::Builder::disownTopic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t TestReply::Reader::getId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t TestReply::Builder::getId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TestReply::Builder::setId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool TestReply::Reader::hasRequest() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool TestReply::Builder::hasRequest() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::curious::message::Request::Reader TestReply::Reader::getRequest() const {
  return ::capnp::_::PointerHelpers< ::curious::message::Request>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::curious::message::Request::Builder TestReply::Builder::getRequest() {
  return ::capnp::_::PointerHelpers< ::curious::message::Request>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::curious::message::Request::Pipeline TestReply::Pipeline::getRequest() {
  return  ::curious::message::Request::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void TestReply::Builder::setRequest( ::curious::message::Request::Reader value) {
  ::capnp::_::PointerHelpers< ::curious::message::Request>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::curious::message::Request::Builder TestReply::Builder::initRequest() {
  return ::capnp::_::PointerHelpers< ::curious::message::Request>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void TestReply::Builder::adoptRequest(
    ::capnp::Orphan< ::curious::message::Request>&& value) {
  ::capnp::_::PointerHelpers< ::curious::message::Request>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::curious::message::Request> TestReply::Builder::disownRequest() {
  return ::capnp::_::PointerHelpers< ::curious::message::Request>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool TestReply::Reader::hasResponse() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool TestReply::Builder::hasResponse() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestReply::Reader::getResponse() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestReply::Builder::getResponse() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void TestReply::Builder::setResponse( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestReply::Builder::initResponse(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void TestReply::Builder::adoptResponse(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestReply::Builder::disownResponse() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::int32_t TestReply::Reader::getResponseTest() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t TestReply::Builder::getResponseTest() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TestReply::Builder::setResponseTest( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::curious::message::MessageType TestRequest::Reader::getMsgType() const {
  return _reader.getDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::curious::message::MessageType TestRequest::Builder::getMsgType() {
  return _builder.getDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void TestRequest::Builder::setMsgType( ::curious::message::MessageType value) {
  _builder.setDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool TestRequest::Reader::hasTopic() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool TestRequest::Builder::hasTopic() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestRequest::Reader::getTopic() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestRequest::Builder::getTopic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void TestRequest::Builder::setTopic( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestRequest::Builder::initTopic(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void TestRequest::Builder::adoptTopic(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestRequest::Builder::disownTopic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t TestRequest::Reader::getId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t TestRequest::Builder::getId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void TestRequest::Builder::setId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool TestRequest::Reader::hasReqGeneratedIp() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool TestRequest::Builder::hasReqGeneratedIp() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestRequest::Reader::getReqGeneratedIp() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestRequest::Builder::getReqGeneratedIp() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void TestRequest::Builder::setReqGeneratedIp( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestRequest::Builder::initReqGeneratedIp(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void TestRequest::Builder::adoptReqGeneratedIp(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestRequest::Builder::disownReqGeneratedIp() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool TestRequest::Reader::hasReqGeneratedPort() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool TestRequest::Builder::hasReqGeneratedPort() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestRequest::Reader::getReqGeneratedPort() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestRequest::Builder::getReqGeneratedPort() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void TestRequest::Builder::setReqGeneratedPort( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestRequest::Builder::initReqGeneratedPort(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void TestRequest::Builder::adoptReqGeneratedPort(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestRequest::Builder::disownReqGeneratedPort() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool TestRequest::Reader::hasMessage() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool TestRequest::Builder::hasMessage() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestRequest::Reader::getMessage() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestRequest::Builder::getMessage() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void TestRequest::Builder::setMessage( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestRequest::Builder::initMessage(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void TestRequest::Builder::adoptMessage(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestRequest::Builder::disownMessage() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool TestRequest::Reader::hasUser() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool TestRequest::Builder::hasUser() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader TestRequest::Reader::getUser() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder TestRequest::Builder::getUser() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void TestRequest::Builder::setUser( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder TestRequest::Builder::initUser(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void TestRequest::Builder::adoptUser(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> TestRequest::Builder::disownUser() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline  ::int32_t TestRequest::Reader::getAge() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::int32_t TestRequest::Builder::getAge() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void TestRequest::Builder::setAge( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::curious::message::MessageType YoutubeBlog::Reader::getMsgType() const {
  return _reader.getDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::curious::message::MessageType YoutubeBlog::Builder::getMsgType() {
  return _builder.getDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void YoutubeBlog::Builder::setMsgType( ::curious::message::MessageType value) {
  _builder.setDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool YoutubeBlog::Reader::hasTopic() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeBlog::Builder::hasTopic() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader YoutubeBlog::Reader::getTopic() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder YoutubeBlog::Builder::getTopic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void YoutubeBlog::Builder::setTopic( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder YoutubeBlog::Builder::initTopic(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void YoutubeBlog::Builder::adoptTopic(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> YoutubeBlog::Builder::disownTopic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool YoutubeBlog::Reader::hasBlogId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeBlog::Builder::hasBlogId() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader YoutubeBlog::Reader::getBlogId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder YoutubeBlog::Builder::getBlogId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void YoutubeBlog::Builder::setBlogId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder YoutubeBlog::Builder::initBlogId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void YoutubeBlog::Builder::adoptBlogId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> YoutubeBlog::Builder::disownBlogId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool YoutubeBlog::Reader::hasTitle() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeBlog::Builder::hasTitle() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader YoutubeBlog::Reader::getTitle() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder YoutubeBlog::Builder::getTitle() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void YoutubeBlog::Builder::setTitle( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder YoutubeBlog::Builder::initTitle(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void YoutubeBlog::Builder::adoptTitle(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> YoutubeBlog::Builder::disownTitle() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool YoutubeBlog::Reader::hasSlug() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeBlog::Builder::hasSlug() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader YoutubeBlog::Reader::getSlug() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder YoutubeBlog::Builder::getSlug() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void YoutubeBlog::Builder::setSlug( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder YoutubeBlog::Builder::initSlug(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void YoutubeBlog::Builder::adoptSlug(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> YoutubeBlog::Builder::disownSlug() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool YoutubeBlog::Reader::hasCoverImageUrl() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeBlog::Builder::hasCoverImageUrl() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader YoutubeBlog::Reader::getCoverImageUrl() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder YoutubeBlog::Builder::getCoverImageUrl() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void YoutubeBlog::Builder::setCoverImageUrl( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder YoutubeBlog::Builder::initCoverImageUrl(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void YoutubeBlog::Builder::adoptCoverImageUrl(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> YoutubeBlog::Builder::disownCoverImageUrl() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool YoutubeBlog::Reader::hasPublishedDate() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeBlog::Builder::hasPublishedDate() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader YoutubeBlog::Reader::getPublishedDate() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder YoutubeBlog::Builder::getPublishedDate() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void YoutubeBlog::Builder::setPublishedDate( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder YoutubeBlog::Builder::initPublishedDate(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void YoutubeBlog::Builder::adoptPublishedDate(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> YoutubeBlog::Builder::disownPublishedDate() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool YoutubeBlog::Reader::hasContentHtml() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeBlog::Builder::hasContentHtml() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader YoutubeBlog::Reader::getContentHtml() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder YoutubeBlog::Builder::getContentHtml() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void YoutubeBlog::Builder::setContentHtml( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder YoutubeBlog::Builder::initContentHtml(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void YoutubeBlog::Builder::adoptContentHtml(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> YoutubeBlog::Builder::disownContentHtml() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline  ::curious::message::MessageType YoutubeBlogHeartbeat::Reader::getMsgType() const {
  return _reader.getDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::curious::message::MessageType YoutubeBlogHeartbeat::Builder::getMsgType() {
  return _builder.getDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void YoutubeBlogHeartbeat::Builder::setMsgType( ::curious::message::MessageType value) {
  _builder.setDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool YoutubeBlogHeartbeat::Reader::hasTopic() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeBlogHeartbeat::Builder::hasTopic() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader YoutubeBlogHeartbeat::Reader::getTopic() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder YoutubeBlogHeartbeat::Builder::getTopic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void YoutubeBlogHeartbeat::Builder::setTopic( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder YoutubeBlogHeartbeat::Builder::initTopic(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void YoutubeBlogHeartbeat::Builder::adoptTopic(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> YoutubeBlogHeartbeat::Builder::disownTopic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t YoutubeBlogHeartbeat::Reader::getResourcesCount() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t YoutubeBlogHeartbeat::Builder::getResourcesCount() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void YoutubeBlogHeartbeat::Builder::setResourcesCount( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::curious::message::MessageType YoutubeBlogSnapshotRequest::Reader::getMsgType() const {
  return _reader.getDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::curious::message::MessageType YoutubeBlogSnapshotRequest::Builder::getMsgType() {
  return _builder.getDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void YoutubeBlogSnapshotRequest::Builder::setMsgType( ::curious::message::MessageType value) {
  _builder.setDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool YoutubeBlogSnapshotRequest::Reader::hasTopic() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeBlogSnapshotRequest::Builder::hasTopic() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader YoutubeBlogSnapshotRequest::Reader::getTopic() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder YoutubeBlogSnapshotRequest::Builder::getTopic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void YoutubeBlogSnapshotRequest::Builder::setTopic( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder YoutubeBlogSnapshotRequest::Builder::initTopic(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void YoutubeBlogSnapshotRequest::Builder::adoptTopic(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> YoutubeBlogSnapshotRequest::Builder::disownTopic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t YoutubeBlogSnapshotRequest::Reader::getId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t YoutubeBlogSnapshotRequest::Builder::getId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void YoutubeBlogSnapshotRequest::Builder::setId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool YoutubeBlogSnapshotRequest::Reader::hasReqGeneratedIp() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeBlogSnapshotRequest::Builder::hasReqGeneratedIp() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader YoutubeBlogSnapshotRequest::Reader::getReqGeneratedIp() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder YoutubeBlogSnapshotRequest::Builder::getReqGeneratedIp() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void YoutubeBlogSnapshotRequest::Builder::setReqGeneratedIp( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder YoutubeBlogSnapshotRequest::Builder::initReqGeneratedIp(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void YoutubeBlogSnapshotRequest::Builder::adoptReqGeneratedIp(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> YoutubeBlogSnapshotRequest::Builder::disownReqGeneratedIp() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool YoutubeBlogSnapshotRequest::Reader::hasReqGeneratedPort() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeBlogSnapshotRequest::Builder::hasReqGeneratedPort() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader YoutubeBlogSnapshotRequest::Reader::getReqGeneratedPort() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder YoutubeBlogSnapshotRequest::Builder::getReqGeneratedPort() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void YoutubeBlogSnapshotRequest::Builder::setReqGeneratedPort( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder YoutubeBlogSnapshotRequest::Builder::initReqGeneratedPort(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void YoutubeBlogSnapshotRequest::Builder::adoptReqGeneratedPort(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> YoutubeBlogSnapshotRequest::Builder::disownReqGeneratedPort() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::curious::message::MessageType YoutubeBlogSnapshotResponse::Reader::getMsgType() const {
  return _reader.getDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::curious::message::MessageType YoutubeBlogSnapshotResponse::Builder::getMsgType() {
  return _builder.getDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void YoutubeBlogSnapshotResponse::Builder::setMsgType( ::curious::message::MessageType value) {
  _builder.setDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool YoutubeBlogSnapshotResponse::Reader::hasTopic() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeBlogSnapshotResponse::Builder::hasTopic() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader YoutubeBlogSnapshotResponse::Reader::getTopic() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder YoutubeBlogSnapshotResponse::Builder::getTopic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void YoutubeBlogSnapshotResponse::Builder::setTopic( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder YoutubeBlogSnapshotResponse::Builder::initTopic(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void YoutubeBlogSnapshotResponse::Builder::adoptTopic(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> YoutubeBlogSnapshotResponse::Builder::disownTopic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t YoutubeBlogSnapshotResponse::Reader::getId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t YoutubeBlogSnapshotResponse::Builder::getId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void YoutubeBlogSnapshotResponse::Builder::setId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool YoutubeBlogSnapshotResponse::Reader::hasRequest() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeBlogSnapshotResponse::Builder::hasRequest() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::curious::message::Request::Reader YoutubeBlogSnapshotResponse::Reader::getRequest() const {
  return ::capnp::_::PointerHelpers< ::curious::message::Request>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::curious::message::Request::Builder YoutubeBlogSnapshotResponse::Builder::getRequest() {
  return ::capnp::_::PointerHelpers< ::curious::message::Request>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::curious::message::Request::Pipeline YoutubeBlogSnapshotResponse::Pipeline::getRequest() {
  return  ::curious::message::Request::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void YoutubeBlogSnapshotResponse::Builder::setRequest( ::curious::message::Request::Reader value) {
  ::capnp::_::PointerHelpers< ::curious::message::Request>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::curious::message::Request::Builder YoutubeBlogSnapshotResponse::Builder::initRequest() {
  return ::capnp::_::PointerHelpers< ::curious::message::Request>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void YoutubeBlogSnapshotResponse::Builder::adoptRequest(
    ::capnp::Orphan< ::curious::message::Request>&& value) {
  ::capnp::_::PointerHelpers< ::curious::message::Request>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::curious::message::Request> YoutubeBlogSnapshotResponse::Builder::disownRequest() {
  return ::capnp::_::PointerHelpers< ::curious::message::Request>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool YoutubeBlogSnapshotResponse::Reader::hasBlogs() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeBlogSnapshotResponse::Builder::hasBlogs() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::curious::message::YoutubeBlog,  ::capnp::Kind::STRUCT>::Reader YoutubeBlogSnapshotResponse::Reader::getBlogs() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::curious::message::YoutubeBlog,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::curious::message::YoutubeBlog,  ::capnp::Kind::STRUCT>::Builder YoutubeBlogSnapshotResponse::Builder::getBlogs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::curious::message::YoutubeBlog,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void YoutubeBlogSnapshotResponse::Builder::setBlogs( ::capnp::List< ::curious::message::YoutubeBlog,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::curious::message::YoutubeBlog,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::curious::message::YoutubeBlog,  ::capnp::Kind::STRUCT>::Builder YoutubeBlogSnapshotResponse::Builder::initBlogs(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::curious::message::YoutubeBlog,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void YoutubeBlogSnapshotResponse::Builder::adoptBlogs(
    ::capnp::Orphan< ::capnp::List< ::curious::message::YoutubeBlog,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::curious::message::YoutubeBlog,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::curious::message::YoutubeBlog,  ::capnp::Kind::STRUCT>> YoutubeBlogSnapshotResponse::Builder::disownBlogs() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::curious::message::YoutubeBlog,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::curious::message::MessageType YoutubeBlogUpdates::Reader::getMsgType() const {
  return _reader.getDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::curious::message::MessageType YoutubeBlogUpdates::Builder::getMsgType() {
  return _builder.getDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void YoutubeBlogUpdates::Builder::setMsgType( ::curious::message::MessageType value) {
  _builder.setDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool YoutubeBlogUpdates::Reader::hasTopic() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeBlogUpdates::Builder::hasTopic() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader YoutubeBlogUpdates::Reader::getTopic() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder YoutubeBlogUpdates::Builder::getTopic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void YoutubeBlogUpdates::Builder::setTopic( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder YoutubeBlogUpdates::Builder::initTopic(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void YoutubeBlogUpdates::Builder::adoptTopic(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> YoutubeBlogUpdates::Builder::disownTopic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool YoutubeBlogUpdates::Reader::hasUpdates() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeBlogUpdates::Builder::hasUpdates() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::curious::message::YoutubeBlog,  ::capnp::Kind::STRUCT>::Reader YoutubeBlogUpdates::Reader::getUpdates() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::curious::message::YoutubeBlog,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::curious::message::YoutubeBlog,  ::capnp::Kind::STRUCT>::Builder YoutubeBlogUpdates::Builder::getUpdates() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::curious::message::YoutubeBlog,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void YoutubeBlogUpdates::Builder::setUpdates( ::capnp::List< ::curious::message::YoutubeBlog,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::curious::message::YoutubeBlog,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::curious::message::YoutubeBlog,  ::capnp::Kind::STRUCT>::Builder YoutubeBlogUpdates::Builder::initUpdates(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::curious::message::YoutubeBlog,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void YoutubeBlogUpdates::Builder::adoptUpdates(
    ::capnp::Orphan< ::capnp::List< ::curious::message::YoutubeBlog,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::curious::message::YoutubeBlog,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::curious::message::YoutubeBlog,  ::capnp::Kind::STRUCT>> YoutubeBlogUpdates::Builder::disownUpdates() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::curious::message::YoutubeBlog,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::curious::message::MessageType YoutubeResource::Reader::getMsgType() const {
  return _reader.getDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::curious::message::MessageType YoutubeResource::Builder::getMsgType() {
  return _builder.getDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void YoutubeResource::Builder::setMsgType( ::curious::message::MessageType value) {
  _builder.setDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool YoutubeResource::Reader::hasTopic() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeResource::Builder::hasTopic() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader YoutubeResource::Reader::getTopic() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder YoutubeResource::Builder::getTopic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void YoutubeResource::Builder::setTopic( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder YoutubeResource::Builder::initTopic(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void YoutubeResource::Builder::adoptTopic(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> YoutubeResource::Builder::disownTopic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool YoutubeResource::Reader::hasResourceId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeResource::Builder::hasResourceId() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader YoutubeResource::Reader::getResourceId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder YoutubeResource::Builder::getResourceId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void YoutubeResource::Builder::setResourceId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder YoutubeResource::Builder::initResourceId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void YoutubeResource::Builder::adoptResourceId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> YoutubeResource::Builder::disownResourceId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool YoutubeResource::Reader::hasTitle() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeResource::Builder::hasTitle() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader YoutubeResource::Reader::getTitle() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder YoutubeResource::Builder::getTitle() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void YoutubeResource::Builder::setTitle( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder YoutubeResource::Builder::initTitle(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void YoutubeResource::Builder::adoptTitle(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> YoutubeResource::Builder::disownTitle() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool YoutubeResource::Reader::hasData() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeResource::Builder::hasData() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader YoutubeResource::Reader::getData() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder YoutubeResource::Builder::getData() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void YoutubeResource::Builder::setData( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder YoutubeResource::Builder::initData(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void YoutubeResource::Builder::adoptData(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> YoutubeResource::Builder::disownData() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool YoutubeResource::Reader::hasDescription() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeResource::Builder::hasDescription() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader YoutubeResource::Reader::getDescription() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder YoutubeResource::Builder::getDescription() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void YoutubeResource::Builder::setDescription( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder YoutubeResource::Builder::initDescription(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void YoutubeResource::Builder::adoptDescription(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> YoutubeResource::Builder::disownDescription() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline  ::curious::message::MessageType YoutubeResourceHeartbeat::Reader::getMsgType() const {
  return _reader.getDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::curious::message::MessageType YoutubeResourceHeartbeat::Builder::getMsgType() {
  return _builder.getDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void YoutubeResourceHeartbeat::Builder::setMsgType( ::curious::message::MessageType value) {
  _builder.setDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool YoutubeResourceHeartbeat::Reader::hasTopic() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeResourceHeartbeat::Builder::hasTopic() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader YoutubeResourceHeartbeat::Reader::getTopic() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder YoutubeResourceHeartbeat::Builder::getTopic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void YoutubeResourceHeartbeat::Builder::setTopic( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder YoutubeResourceHeartbeat::Builder::initTopic(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void YoutubeResourceHeartbeat::Builder::adoptTopic(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> YoutubeResourceHeartbeat::Builder::disownTopic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t YoutubeResourceHeartbeat::Reader::getResourcesCount() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t YoutubeResourceHeartbeat::Builder::getResourcesCount() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void YoutubeResourceHeartbeat::Builder::setResourcesCount( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::curious::message::MessageType YoutubeResourceSnapshotRequest::Reader::getMsgType() const {
  return _reader.getDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::curious::message::MessageType YoutubeResourceSnapshotRequest::Builder::getMsgType() {
  return _builder.getDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void YoutubeResourceSnapshotRequest::Builder::setMsgType( ::curious::message::MessageType value) {
  _builder.setDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool YoutubeResourceSnapshotRequest::Reader::hasTopic() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeResourceSnapshotRequest::Builder::hasTopic() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader YoutubeResourceSnapshotRequest::Reader::getTopic() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder YoutubeResourceSnapshotRequest::Builder::getTopic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void YoutubeResourceSnapshotRequest::Builder::setTopic( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder YoutubeResourceSnapshotRequest::Builder::initTopic(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void YoutubeResourceSnapshotRequest::Builder::adoptTopic(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> YoutubeResourceSnapshotRequest::Builder::disownTopic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t YoutubeResourceSnapshotRequest::Reader::getId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t YoutubeResourceSnapshotRequest::Builder::getId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void YoutubeResourceSnapshotRequest::Builder::setId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool YoutubeResourceSnapshotRequest::Reader::hasReqGeneratedIp() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeResourceSnapshotRequest::Builder::hasReqGeneratedIp() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader YoutubeResourceSnapshotRequest::Reader::getReqGeneratedIp() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder YoutubeResourceSnapshotRequest::Builder::getReqGeneratedIp() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void YoutubeResourceSnapshotRequest::Builder::setReqGeneratedIp( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder YoutubeResourceSnapshotRequest::Builder::initReqGeneratedIp(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void YoutubeResourceSnapshotRequest::Builder::adoptReqGeneratedIp(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> YoutubeResourceSnapshotRequest::Builder::disownReqGeneratedIp() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool YoutubeResourceSnapshotRequest::Reader::hasReqGeneratedPort() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeResourceSnapshotRequest::Builder::hasReqGeneratedPort() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader YoutubeResourceSnapshotRequest::Reader::getReqGeneratedPort() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder YoutubeResourceSnapshotRequest::Builder::getReqGeneratedPort() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void YoutubeResourceSnapshotRequest::Builder::setReqGeneratedPort( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder YoutubeResourceSnapshotRequest::Builder::initReqGeneratedPort(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void YoutubeResourceSnapshotRequest::Builder::adoptReqGeneratedPort(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> YoutubeResourceSnapshotRequest::Builder::disownReqGeneratedPort() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::curious::message::MessageType YoutubeResourceSnapshotResponse::Reader::getMsgType() const {
  return _reader.getDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::curious::message::MessageType YoutubeResourceSnapshotResponse::Builder::getMsgType() {
  return _builder.getDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void YoutubeResourceSnapshotResponse::Builder::setMsgType( ::curious::message::MessageType value) {
  _builder.setDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool YoutubeResourceSnapshotResponse::Reader::hasTopic() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeResourceSnapshotResponse::Builder::hasTopic() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader YoutubeResourceSnapshotResponse::Reader::getTopic() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder YoutubeResourceSnapshotResponse::Builder::getTopic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void YoutubeResourceSnapshotResponse::Builder::setTopic( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder YoutubeResourceSnapshotResponse::Builder::initTopic(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void YoutubeResourceSnapshotResponse::Builder::adoptTopic(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> YoutubeResourceSnapshotResponse::Builder::disownTopic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t YoutubeResourceSnapshotResponse::Reader::getId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t YoutubeResourceSnapshotResponse::Builder::getId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void YoutubeResourceSnapshotResponse::Builder::setId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool YoutubeResourceSnapshotResponse::Reader::hasRequest() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeResourceSnapshotResponse::Builder::hasRequest() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::curious::message::Request::Reader YoutubeResourceSnapshotResponse::Reader::getRequest() const {
  return ::capnp::_::PointerHelpers< ::curious::message::Request>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::curious::message::Request::Builder YoutubeResourceSnapshotResponse::Builder::getRequest() {
  return ::capnp::_::PointerHelpers< ::curious::message::Request>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::curious::message::Request::Pipeline YoutubeResourceSnapshotResponse::Pipeline::getRequest() {
  return  ::curious::message::Request::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void YoutubeResourceSnapshotResponse::Builder::setRequest( ::curious::message::Request::Reader value) {
  ::capnp::_::PointerHelpers< ::curious::message::Request>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::curious::message::Request::Builder YoutubeResourceSnapshotResponse::Builder::initRequest() {
  return ::capnp::_::PointerHelpers< ::curious::message::Request>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void YoutubeResourceSnapshotResponse::Builder::adoptRequest(
    ::capnp::Orphan< ::curious::message::Request>&& value) {
  ::capnp::_::PointerHelpers< ::curious::message::Request>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::curious::message::Request> YoutubeResourceSnapshotResponse::Builder::disownRequest() {
  return ::capnp::_::PointerHelpers< ::curious::message::Request>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool YoutubeResourceSnapshotResponse::Reader::hasResources() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeResourceSnapshotResponse::Builder::hasResources() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::curious::message::YoutubeResource,  ::capnp::Kind::STRUCT>::Reader YoutubeResourceSnapshotResponse::Reader::getResources() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::curious::message::YoutubeResource,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::curious::message::YoutubeResource,  ::capnp::Kind::STRUCT>::Builder YoutubeResourceSnapshotResponse::Builder::getResources() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::curious::message::YoutubeResource,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void YoutubeResourceSnapshotResponse::Builder::setResources( ::capnp::List< ::curious::message::YoutubeResource,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::curious::message::YoutubeResource,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::curious::message::YoutubeResource,  ::capnp::Kind::STRUCT>::Builder YoutubeResourceSnapshotResponse::Builder::initResources(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::curious::message::YoutubeResource,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void YoutubeResourceSnapshotResponse::Builder::adoptResources(
    ::capnp::Orphan< ::capnp::List< ::curious::message::YoutubeResource,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::curious::message::YoutubeResource,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::curious::message::YoutubeResource,  ::capnp::Kind::STRUCT>> YoutubeResourceSnapshotResponse::Builder::disownResources() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::curious::message::YoutubeResource,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::curious::message::MessageType YoutubeResourceUpdates::Reader::getMsgType() const {
  return _reader.getDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::curious::message::MessageType YoutubeResourceUpdates::Builder::getMsgType() {
  return _builder.getDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void YoutubeResourceUpdates::Builder::setMsgType( ::curious::message::MessageType value) {
  _builder.setDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool YoutubeResourceUpdates::Reader::hasTopic() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeResourceUpdates::Builder::hasTopic() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader YoutubeResourceUpdates::Reader::getTopic() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder YoutubeResourceUpdates::Builder::getTopic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void YoutubeResourceUpdates::Builder::setTopic( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder YoutubeResourceUpdates::Builder::initTopic(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void YoutubeResourceUpdates::Builder::adoptTopic(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> YoutubeResourceUpdates::Builder::disownTopic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool YoutubeResourceUpdates::Reader::hasUpdates() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeResourceUpdates::Builder::hasUpdates() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::curious::message::YoutubeResource,  ::capnp::Kind::STRUCT>::Reader YoutubeResourceUpdates::Reader::getUpdates() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::curious::message::YoutubeResource,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::curious::message::YoutubeResource,  ::capnp::Kind::STRUCT>::Builder YoutubeResourceUpdates::Builder::getUpdates() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::curious::message::YoutubeResource,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void YoutubeResourceUpdates::Builder::setUpdates( ::capnp::List< ::curious::message::YoutubeResource,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::curious::message::YoutubeResource,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::curious::message::YoutubeResource,  ::capnp::Kind::STRUCT>::Builder YoutubeResourceUpdates::Builder::initUpdates(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::curious::message::YoutubeResource,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void YoutubeResourceUpdates::Builder::adoptUpdates(
    ::capnp::Orphan< ::capnp::List< ::curious::message::YoutubeResource,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::curious::message::YoutubeResource,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::curious::message::YoutubeResource,  ::capnp::Kind::STRUCT>> YoutubeResourceUpdates::Builder::disownUpdates() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::curious::message::YoutubeResource,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline  ::curious::message::MessageType YoutubeVideo::Reader::getMsgType() const {
  return _reader.getDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::curious::message::MessageType YoutubeVideo::Builder::getMsgType() {
  return _builder.getDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void YoutubeVideo::Builder::setMsgType( ::curious::message::MessageType value) {
  _builder.setDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool YoutubeVideo::Reader::hasTopic() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeVideo::Builder::hasTopic() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader YoutubeVideo::Reader::getTopic() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder YoutubeVideo::Builder::getTopic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void YoutubeVideo::Builder::setTopic( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder YoutubeVideo::Builder::initTopic(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void YoutubeVideo::Builder::adoptTopic(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> YoutubeVideo::Builder::disownTopic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool YoutubeVideo::Reader::hasVideoId() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeVideo::Builder::hasVideoId() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader YoutubeVideo::Reader::getVideoId() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder YoutubeVideo::Builder::getVideoId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void YoutubeVideo::Builder::setVideoId( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder YoutubeVideo::Builder::initVideoId(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void YoutubeVideo::Builder::adoptVideoId(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> YoutubeVideo::Builder::disownVideoId() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool YoutubeVideo::Reader::hasTitle() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeVideo::Builder::hasTitle() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader YoutubeVideo::Reader::getTitle() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder YoutubeVideo::Builder::getTitle() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void YoutubeVideo::Builder::setTitle( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder YoutubeVideo::Builder::initTitle(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void YoutubeVideo::Builder::adoptTitle(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> YoutubeVideo::Builder::disownTitle() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline bool YoutubeVideo::Reader::hasThumbnail() const {
  return !_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeVideo::Builder::hasThumbnail() {
  return !_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader YoutubeVideo::Reader::getThumbnail() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder YoutubeVideo::Builder::getThumbnail() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}
inline void YoutubeVideo::Builder::setThumbnail( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder YoutubeVideo::Builder::initThumbnail(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), size);
}
inline void YoutubeVideo::Builder::adoptThumbnail(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> YoutubeVideo::Builder::disownThumbnail() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<3>() * ::capnp::POINTERS));
}

inline bool YoutubeVideo::Reader::hasThumbnailMedium() const {
  return !_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeVideo::Builder::hasThumbnailMedium() {
  return !_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader YoutubeVideo::Reader::getThumbnailMedium() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder YoutubeVideo::Builder::getThumbnailMedium() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}
inline void YoutubeVideo::Builder::setThumbnailMedium( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder YoutubeVideo::Builder::initThumbnailMedium(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), size);
}
inline void YoutubeVideo::Builder::adoptThumbnailMedium(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> YoutubeVideo::Builder::disownThumbnailMedium() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<4>() * ::capnp::POINTERS));
}

inline bool YoutubeVideo::Reader::hasThumbnailHigh() const {
  return !_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeVideo::Builder::hasThumbnailHigh() {
  return !_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader YoutubeVideo::Reader::getThumbnailHigh() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder YoutubeVideo::Builder::getThumbnailHigh() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}
inline void YoutubeVideo::Builder::setThumbnailHigh( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder YoutubeVideo::Builder::initThumbnailHigh(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), size);
}
inline void YoutubeVideo::Builder::adoptThumbnailHigh(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> YoutubeVideo::Builder::disownThumbnailHigh() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<5>() * ::capnp::POINTERS));
}

inline bool YoutubeVideo::Reader::hasThumbnailStandard() const {
  return !_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeVideo::Builder::hasThumbnailStandard() {
  return !_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader YoutubeVideo::Reader::getThumbnailStandard() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder YoutubeVideo::Builder::getThumbnailStandard() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}
inline void YoutubeVideo::Builder::setThumbnailStandard( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder YoutubeVideo::Builder::initThumbnailStandard(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), size);
}
inline void YoutubeVideo::Builder::adoptThumbnailStandard(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> YoutubeVideo::Builder::disownThumbnailStandard() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<6>() * ::capnp::POINTERS));
}

inline bool YoutubeVideo::Reader::hasThumbnailMaxres() const {
  return !_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeVideo::Builder::hasThumbnailMaxres() {
  return !_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader YoutubeVideo::Reader::getThumbnailMaxres() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder YoutubeVideo::Builder::getThumbnailMaxres() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}
inline void YoutubeVideo::Builder::setThumbnailMaxres( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder YoutubeVideo::Builder::initThumbnailMaxres(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), size);
}
inline void YoutubeVideo::Builder::adoptThumbnailMaxres(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> YoutubeVideo::Builder::disownThumbnailMaxres() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<7>() * ::capnp::POINTERS));
}

inline  ::curious::message::MessageType YoutubeVideoHeartbeat::Reader::getMsgType() const {
  return _reader.getDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::curious::message::MessageType YoutubeVideoHeartbeat::Builder::getMsgType() {
  return _builder.getDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void YoutubeVideoHeartbeat::Builder::setMsgType( ::curious::message::MessageType value) {
  _builder.setDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool YoutubeVideoHeartbeat::Reader::hasTopic() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeVideoHeartbeat::Builder::hasTopic() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader YoutubeVideoHeartbeat::Reader::getTopic() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder YoutubeVideoHeartbeat::Builder::getTopic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void YoutubeVideoHeartbeat::Builder::setTopic( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder YoutubeVideoHeartbeat::Builder::initTopic(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void YoutubeVideoHeartbeat::Builder::adoptTopic(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> YoutubeVideoHeartbeat::Builder::disownTopic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t YoutubeVideoHeartbeat::Reader::getVideosCount() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t YoutubeVideoHeartbeat::Builder::getVideosCount() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void YoutubeVideoHeartbeat::Builder::setVideosCount( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::curious::message::MessageType YoutubeVideoSnapshotRequest::Reader::getMsgType() const {
  return _reader.getDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::curious::message::MessageType YoutubeVideoSnapshotRequest::Builder::getMsgType() {
  return _builder.getDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void YoutubeVideoSnapshotRequest::Builder::setMsgType( ::curious::message::MessageType value) {
  _builder.setDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool YoutubeVideoSnapshotRequest::Reader::hasTopic() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeVideoSnapshotRequest::Builder::hasTopic() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader YoutubeVideoSnapshotRequest::Reader::getTopic() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder YoutubeVideoSnapshotRequest::Builder::getTopic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void YoutubeVideoSnapshotRequest::Builder::setTopic( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder YoutubeVideoSnapshotRequest::Builder::initTopic(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void YoutubeVideoSnapshotRequest::Builder::adoptTopic(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> YoutubeVideoSnapshotRequest::Builder::disownTopic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t YoutubeVideoSnapshotRequest::Reader::getId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t YoutubeVideoSnapshotRequest::Builder::getId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void YoutubeVideoSnapshotRequest::Builder::setId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool YoutubeVideoSnapshotRequest::Reader::hasReqGeneratedIp() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeVideoSnapshotRequest::Builder::hasReqGeneratedIp() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader YoutubeVideoSnapshotRequest::Reader::getReqGeneratedIp() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder YoutubeVideoSnapshotRequest::Builder::getReqGeneratedIp() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void YoutubeVideoSnapshotRequest::Builder::setReqGeneratedIp( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder YoutubeVideoSnapshotRequest::Builder::initReqGeneratedIp(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void YoutubeVideoSnapshotRequest::Builder::adoptReqGeneratedIp(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> YoutubeVideoSnapshotRequest::Builder::disownReqGeneratedIp() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool YoutubeVideoSnapshotRequest::Reader::hasReqGeneratedPort() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeVideoSnapshotRequest::Builder::hasReqGeneratedPort() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader YoutubeVideoSnapshotRequest::Reader::getReqGeneratedPort() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder YoutubeVideoSnapshotRequest::Builder::getReqGeneratedPort() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void YoutubeVideoSnapshotRequest::Builder::setReqGeneratedPort( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder YoutubeVideoSnapshotRequest::Builder::initReqGeneratedPort(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void YoutubeVideoSnapshotRequest::Builder::adoptReqGeneratedPort(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> YoutubeVideoSnapshotRequest::Builder::disownReqGeneratedPort() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::curious::message::MessageType YoutubeVideoSnapshotResponse::Reader::getMsgType() const {
  return _reader.getDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::curious::message::MessageType YoutubeVideoSnapshotResponse::Builder::getMsgType() {
  return _builder.getDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void YoutubeVideoSnapshotResponse::Builder::setMsgType( ::curious::message::MessageType value) {
  _builder.setDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool YoutubeVideoSnapshotResponse::Reader::hasTopic() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeVideoSnapshotResponse::Builder::hasTopic() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader YoutubeVideoSnapshotResponse::Reader::getTopic() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder YoutubeVideoSnapshotResponse::Builder::getTopic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void YoutubeVideoSnapshotResponse::Builder::setTopic( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder YoutubeVideoSnapshotResponse::Builder::initTopic(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void YoutubeVideoSnapshotResponse::Builder::adoptTopic(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> YoutubeVideoSnapshotResponse::Builder::disownTopic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::int32_t YoutubeVideoSnapshotResponse::Reader::getId() const {
  return _reader.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::int32_t YoutubeVideoSnapshotResponse::Builder::getId() {
  return _builder.getDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void YoutubeVideoSnapshotResponse::Builder::setId( ::int32_t value) {
  _builder.setDataField< ::int32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool YoutubeVideoSnapshotResponse::Reader::hasRequest() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeVideoSnapshotResponse::Builder::hasRequest() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::curious::message::Request::Reader YoutubeVideoSnapshotResponse::Reader::getRequest() const {
  return ::capnp::_::PointerHelpers< ::curious::message::Request>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::curious::message::Request::Builder YoutubeVideoSnapshotResponse::Builder::getRequest() {
  return ::capnp::_::PointerHelpers< ::curious::message::Request>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline  ::curious::message::Request::Pipeline YoutubeVideoSnapshotResponse::Pipeline::getRequest() {
  return  ::curious::message::Request::Pipeline(_typeless.getPointerField(1));
}
#endif  // !CAPNP_LITE
inline void YoutubeVideoSnapshotResponse::Builder::setRequest( ::curious::message::Request::Reader value) {
  ::capnp::_::PointerHelpers< ::curious::message::Request>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::curious::message::Request::Builder YoutubeVideoSnapshotResponse::Builder::initRequest() {
  return ::capnp::_::PointerHelpers< ::curious::message::Request>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void YoutubeVideoSnapshotResponse::Builder::adoptRequest(
    ::capnp::Orphan< ::curious::message::Request>&& value) {
  ::capnp::_::PointerHelpers< ::curious::message::Request>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::curious::message::Request> YoutubeVideoSnapshotResponse::Builder::disownRequest() {
  return ::capnp::_::PointerHelpers< ::curious::message::Request>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool YoutubeVideoSnapshotResponse::Reader::hasVideos() const {
  return !_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeVideoSnapshotResponse::Builder::hasVideos() {
  return !_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::curious::message::YoutubeVideo,  ::capnp::Kind::STRUCT>::Reader YoutubeVideoSnapshotResponse::Reader::getVideos() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::curious::message::YoutubeVideo,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::curious::message::YoutubeVideo,  ::capnp::Kind::STRUCT>::Builder YoutubeVideoSnapshotResponse::Builder::getVideos() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::curious::message::YoutubeVideo,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void YoutubeVideoSnapshotResponse::Builder::setVideos( ::capnp::List< ::curious::message::YoutubeVideo,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::curious::message::YoutubeVideo,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::curious::message::YoutubeVideo,  ::capnp::Kind::STRUCT>::Builder YoutubeVideoSnapshotResponse::Builder::initVideos(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::curious::message::YoutubeVideo,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), size);
}
inline void YoutubeVideoSnapshotResponse::Builder::adoptVideos(
    ::capnp::Orphan< ::capnp::List< ::curious::message::YoutubeVideo,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::curious::message::YoutubeVideo,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::curious::message::YoutubeVideo,  ::capnp::Kind::STRUCT>> YoutubeVideoSnapshotResponse::Builder::disownVideos() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::curious::message::YoutubeVideo,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline  ::curious::message::MessageType YoutubeVideoUpdates::Reader::getMsgType() const {
  return _reader.getDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::curious::message::MessageType YoutubeVideoUpdates::Builder::getMsgType() {
  return _builder.getDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void YoutubeVideoUpdates::Builder::setMsgType( ::curious::message::MessageType value) {
  _builder.setDataField< ::curious::message::MessageType>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool YoutubeVideoUpdates::Reader::hasTopic() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeVideoUpdates::Builder::hasTopic() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader YoutubeVideoUpdates::Reader::getTopic() const {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder YoutubeVideoUpdates::Builder::getTopic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void YoutubeVideoUpdates::Builder::setTopic( ::capnp::Text::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder YoutubeVideoUpdates::Builder::initTopic(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void YoutubeVideoUpdates::Builder::adoptTopic(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> YoutubeVideoUpdates::Builder::disownTopic() {
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool YoutubeVideoUpdates::Reader::hasVideos() const {
  return !_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline bool YoutubeVideoUpdates::Builder::hasVideos() {
  return !_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::curious::message::YoutubeVideo,  ::capnp::Kind::STRUCT>::Reader YoutubeVideoUpdates::Reader::getVideos() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::curious::message::YoutubeVideo,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::curious::message::YoutubeVideo,  ::capnp::Kind::STRUCT>::Builder YoutubeVideoUpdates::Builder::getVideos() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::curious::message::YoutubeVideo,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void YoutubeVideoUpdates::Builder::setVideos( ::capnp::List< ::curious::message::YoutubeVideo,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::curious::message::YoutubeVideo,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::curious::message::YoutubeVideo,  ::capnp::Kind::STRUCT>::Builder YoutubeVideoUpdates::Builder::initVideos(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::curious::message::YoutubeVideo,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), size);
}
inline void YoutubeVideoUpdates::Builder::adoptVideos(
    ::capnp::Orphan< ::capnp::List< ::curious::message::YoutubeVideo,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::curious::message::YoutubeVideo,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::curious::message::YoutubeVideo,  ::capnp::Kind::STRUCT>> YoutubeVideoUpdates::Builder::disownVideos() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::curious::message::YoutubeVideo,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<1>() * ::capnp::POINTERS));
}

}  // namespace
}  // namespace

CAPNP_END_HEADER

